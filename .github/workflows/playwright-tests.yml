name: SearchBar E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  e2e-tests:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: Password@123
          MYSQL_DATABASE: SearchBackend
        # GitHub Actions services are available on localhost:3306 automatically.
        # Explicit port mapping is usually unnecessary and can be omitted.
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install OS dependencies (mysql client)
        run: sudo apt-get update && sudo apt-get install -y default-mysql-client

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flask flask-sqlalchemy flask-cors python-dotenv pymysql

      - name: Install Node.js dependencies
        run: npm ci

      - name: Install Playwright browsers (with deps)
        run: |
          # Ensure Playwright installs required browsers and system deps for CI
          npx playwright install --with-deps chromium

      - name: Wait for MySQL
        run: |
          echo "Waiting for MySQL (up to 5 minutes)..."
          ready=false
          for i in {1..60}; do
            if mysqladmin --protocol=TCP ping -h mysql -u root -pPassword@123 --silent 2>/dev/null; then
              echo "MySQL is ready on service host 'mysql' (attempt $i)"
              ready=true
              break
            elif mysqladmin --protocol=TCP ping -h 127.0.0.1 -u root -pPassword@123 --silent 2>/dev/null; then
              echo "MySQL is ready on 127.0.0.1 (attempt $i)"
              ready=true
              break
            else
              echo "Waiting for MySQL... (attempt $i/60)"
            fi
            sleep 5
          done

          if [ "$ready" != "true" ]; then
            echo "ERROR: MySQL did not become available in time."
            # show any available service/container info for debugging
            docker ps --filter "ancestor=mysql:8.0" --format "{{.ID}} {{.Image}} {{.Status}}" || true
            exit 1
          fi

      - name: Setup database
        run: |
          SQL_BLOCK=$(cat <<'SQL'
            CREATE TABLE IF NOT EXISTS item (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(100) NOT NULL
            );
            INSERT IGNORE INTO item (id, name) VALUES 
            (1, 'test item 1'),
            (2, 'test item 2'),
            (3, 'testing'),
            (4, 'tests'),
            (5, 'example test'),
            (201, 'test'),
            (214, 'testing'),
            (215, 'tests'),
            (216, 'test');
            SQL
            )
          # Try service hostname first, then fallback to localhost
          if mysql --protocol=TCP -h mysql -u root -pPassword@123 SearchBackend <<< "$SQL_BLOCK"; then
            echo "DB setup succeeded via host 'mysql'"
          else
            echo "Host 'mysql' failed â€” retrying with 127.0.0.1"
            mysql --protocol=TCP -h 127.0.0.1 -u root -pPassword@123 SearchBackend <<< "$SQL_BLOCK"
          fi

      - name: Create backend .env file
        run: |
          cat > .env << EOF
          MYSQL_USER=root
          MYSQL_PASS=Password@123
          MYSQL_HOST=localhost
          MYSQL_PORT=3306
          MYSQL_DB=SearchBackend
          FLASK_ENV=development
          FLASK_APP=app.py
          EOF

      - name: Start Flask backend
        run: |
          # Prefer using flask run so you can control host/port; fallback to `python app.py` if your app boots differently.
          if command -v flask >/dev/null 2>&1; then
            flask run --host=0.0.0.0 --port=5001 &
          else
            python app.py &   # ensure your app binds 0.0.0.0:5001
          fi
          echo $! > flask.pid
        env:
          MYSQL_USER: root
          MYSQL_PASS: Password@123
          MYSQL_HOST: localhost
          MYSQL_PORT: 3306
          MYSQL_DB: SearchBackend
          FLASK_ENV: development

      - name: Wait for Flask backend
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:5001/ > /dev/null; then
              echo "Flask backend is ready!"
              break
            fi
            echo "Waiting for Flask backend... ($i/30)"
            sleep 2
          done
          echo "Testing API endpoint:"
          curl -X GET 'http://localhost:5001/api/items?q=test' -H 'Content-Type: application/json' || true

      - name: Build React frontend
        run: npm run build

      - name: Start React frontend (Vite preview)
        run: |
          npm run preview &
          echo $! > react.pid
        env:
          CI: true

      - name: Wait for React frontend
        run: |
          for i in {1..60}; do
            if curl -s http://localhost:4173/ > /dev/null; then
              echo "React frontend is ready!"
              break
            fi
            echo "Waiting for React frontend... ($i/60)"
            sleep 2
          done

      - name: Run Cucumber E2E tests
        run: |
          export HEADLESS=true
          export APP_URL=http://localhost:4173
          npx cucumber-js --format json:test-results.json --format @cucumber/pretty-formatter
        env:
          NODE_ENV: test

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-results.json
            test-results/
            screenshots/
            videos/

      - name: Upload Playwright traces
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces
          path: test-results/

      - name: Cleanup processes
        if: always()
        run: |
          if [ -f flask.pid ]; then
            kill $(cat flask.pid) || true
          fi
          if [ -f react.pid ]; then
            kill $(cat react.pid) || true
          fi
          pkill -f "python app.py" || true
          pkill -f "npm run preview" || true

      - name: Show application logs
        if: failure()
        run: |
          echo "=== Flask Backend Logs ==="
          curl -s http://localhost:5001/ || echo "Backend not responding"
          echo "=== React Frontend Logs ==="
          curl -s http://localhost:4173/ || echo "Frontend not responding"
          echo "=== Database Status ==="
          mysql -h 127.0.0.1 -u root -pPassword@123 SearchBackend -e "SELECT COUNT(*) as item_count FROM item;" || echo "Database not accessible"
